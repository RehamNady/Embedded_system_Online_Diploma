
interrupt controller on Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000711  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e0  00000000  00000000  000009e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000313  00000000  00000000  00000fc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  000012d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036d  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  000016fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000018d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_1>
   8:	0c 94 ab 00 	jmp	0x156	; 0x156 <__vector_2>
   c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  74:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <GPIO_init>:
volatile int i;


void GPIO_init()
{
	DDRB_REG &=~(1<<2); // set B2 input
  7c:	87 b3       	in	r24, 0x17	; 23
  7e:	98 b3       	in	r25, 0x18	; 24
  80:	8b 7f       	andi	r24, 0xFB	; 251
  82:	98 bb       	out	0x18, r25	; 24
  84:	87 bb       	out	0x17, r24	; 23
	DDRD_REG &=~((1<<2)|(1<<3)); // set D2&3 input
  86:	81 b3       	in	r24, 0x11	; 17
  88:	92 b3       	in	r25, 0x12	; 18
  8a:	83 7f       	andi	r24, 0xF3	; 243
  8c:	92 bb       	out	0x12, r25	; 18
  8e:	81 bb       	out	0x11, r24	; 17
	DDRD_REG |=(1<<5)|(1<<6)|(1<<7);//set D5,6,7 as output
  90:	81 b3       	in	r24, 0x11	; 17
  92:	92 b3       	in	r25, 0x12	; 18
  94:	80 6e       	ori	r24, 0xE0	; 224
  96:	92 bb       	out	0x12, r25	; 18
  98:	81 bb       	out	0x11, r24	; 17
	PORTB_REG &=~(1<<2); // pull-up resistor off
  9a:	88 b3       	in	r24, 0x18	; 24
  9c:	99 b3       	in	r25, 0x19	; 25
  9e:	8b 7f       	andi	r24, 0xFB	; 251
  a0:	99 bb       	out	0x19, r25	; 25
  a2:	88 bb       	out	0x18, r24	; 24
	PORTD_REG &=~((1<<2)|(1<<3)); //pull-up resistor off
  a4:	82 b3       	in	r24, 0x12	; 18
  a6:	93 b3       	in	r25, 0x13	; 19
  a8:	83 7f       	andi	r24, 0xF3	; 243
  aa:	93 bb       	out	0x13, r25	; 19
  ac:	82 bb       	out	0x12, r24	; 18
  ae:	08 95       	ret

000000b0 <main>:
}

int main(void)
{
    GPIO_init();
  b0:	0e 94 3e 00 	call	0x7c	; 0x7c <GPIO_init>
	MCUCR_REG |=((1<<3)|(1<<2)); // rising edge interrupt 1;
  b4:	85 b7       	in	r24, 0x35	; 53
  b6:	96 b7       	in	r25, 0x36	; 54
  b8:	8c 60       	ori	r24, 0x0C	; 12
  ba:	96 bf       	out	0x36, r25	; 54
  bc:	85 bf       	out	0x35, r24	; 53
	// Any logical change on INT0 generates an interrupt request.
	MCUCR_REG |=(1<<0);
  be:	85 b7       	in	r24, 0x35	; 53
  c0:	96 b7       	in	r25, 0x36	; 54
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	96 bf       	out	0x36, r25	; 54
  c6:	85 bf       	out	0x35, r24	; 53
	MCUCR_REG &=~(1<<1);
  c8:	85 b7       	in	r24, 0x35	; 53
  ca:	96 b7       	in	r25, 0x36	; 54
  cc:	8d 7f       	andi	r24, 0xFD	; 253
  ce:	96 bf       	out	0x36, r25	; 54
  d0:	85 bf       	out	0x35, r24	; 53
	MCUCSR_REG &=~(1<<6); //falling edge on INT2 activates
  d2:	84 b7       	in	r24, 0x34	; 52
  d4:	95 b7       	in	r25, 0x35	; 53
  d6:	8f 7b       	andi	r24, 0xBF	; 191
  d8:	95 bf       	out	0x35, r25	; 53
  da:	84 bf       	out	0x34, r24	; 52
	GICR_REG |=((1<<5)|(1<<6)|(1<<7));//External Interrupt Request 0&1&2 Enable
  dc:	8b b7       	in	r24, 0x3b	; 59
  de:	9c b7       	in	r25, 0x3c	; 60
  e0:	80 6e       	ori	r24, 0xE0	; 224
  e2:	9c bf       	out	0x3c, r25	; 60
  e4:	8b bf       	out	0x3b, r24	; 59
	//Global Interrupt Enable
	sei();
  e6:	78 94       	sei
    while (1) 
    {
		PORTD_REG &=~(1<<5);
  e8:	82 b3       	in	r24, 0x12	; 18
  ea:	93 b3       	in	r25, 0x13	; 19
  ec:	8f 7d       	andi	r24, 0xDF	; 223
  ee:	93 bb       	out	0x13, r25	; 19
  f0:	82 bb       	out	0x12, r24	; 18
		PORTD_REG &=~(1<<6);
  f2:	82 b3       	in	r24, 0x12	; 18
  f4:	93 b3       	in	r25, 0x13	; 19
  f6:	8f 7b       	andi	r24, 0xBF	; 191
  f8:	93 bb       	out	0x13, r25	; 19
  fa:	82 bb       	out	0x12, r24	; 18
		PORTD_REG &=~(1<<7);
  fc:	82 b3       	in	r24, 0x12	; 18
  fe:	93 b3       	in	r25, 0x13	; 19
 100:	8f 77       	andi	r24, 0x7F	; 127
 102:	93 bb       	out	0x13, r25	; 19
 104:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	2f e3       	ldi	r18, 0x3F	; 63
 108:	8d e0       	ldi	r24, 0x0D	; 13
 10a:	93 e0       	ldi	r25, 0x03	; 3
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x5c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x66>
 116:	00 00       	nop
 118:	e7 cf       	rjmp	.-50     	; 0xe8 <main+0x38>

0000011a <__vector_1>:
    }
	return 0;
}

ISR(INT0_vect)
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	2f 93       	push	r18
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
	PORTD_REG |=1<<5;
 12a:	82 b3       	in	r24, 0x12	; 18
 12c:	93 b3       	in	r25, 0x13	; 19
 12e:	80 62       	ori	r24, 0x20	; 32
 130:	93 bb       	out	0x13, r25	; 19
 132:	82 bb       	out	0x12, r24	; 18
 134:	2f e3       	ldi	r18, 0x3F	; 63
 136:	8d e0       	ldi	r24, 0x0D	; 13
 138:	93 e0       	ldi	r25, 0x03	; 3
 13a:	21 50       	subi	r18, 0x01	; 1
 13c:	80 40       	sbci	r24, 0x00	; 0
 13e:	90 40       	sbci	r25, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <__vector_1+0x20>
 142:	00 c0       	rjmp	.+0      	; 0x144 <__vector_1+0x2a>
 144:	00 00       	nop
	_delay_ms(1000);
		
}
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	2f 91       	pop	r18
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <__vector_2>:

ISR(INT1_vect)
{
 156:	1f 92       	push	r1
 158:	0f 92       	push	r0
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	0f 92       	push	r0
 15e:	11 24       	eor	r1, r1
 160:	2f 93       	push	r18
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
	PORTD_REG |=1<<6;
 166:	82 b3       	in	r24, 0x12	; 18
 168:	93 b3       	in	r25, 0x13	; 19
 16a:	80 64       	ori	r24, 0x40	; 64
 16c:	93 bb       	out	0x13, r25	; 19
 16e:	82 bb       	out	0x12, r24	; 18
 170:	2f e3       	ldi	r18, 0x3F	; 63
 172:	8d e0       	ldi	r24, 0x0D	; 13
 174:	93 e0       	ldi	r25, 0x03	; 3
 176:	21 50       	subi	r18, 0x01	; 1
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <__vector_2+0x20>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <__vector_2+0x2a>
 180:	00 00       	nop
	_delay_ms(1000);

}
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	2f 91       	pop	r18
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <__vector_3>:
ISR(INT2_vect)
{
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	2f 93       	push	r18
 19e:	8f 93       	push	r24
 1a0:	9f 93       	push	r25
	PORTD_REG |=1<<7;
 1a2:	82 b3       	in	r24, 0x12	; 18
 1a4:	93 b3       	in	r25, 0x13	; 19
 1a6:	80 68       	ori	r24, 0x80	; 128
 1a8:	93 bb       	out	0x13, r25	; 19
 1aa:	82 bb       	out	0x12, r24	; 18
 1ac:	2f e3       	ldi	r18, 0x3F	; 63
 1ae:	8d e0       	ldi	r24, 0x0D	; 13
 1b0:	93 e0       	ldi	r25, 0x03	; 3
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	80 40       	sbci	r24, 0x00	; 0
 1b6:	90 40       	sbci	r25, 0x00	; 0
 1b8:	e1 f7       	brne	.-8      	; 0x1b2 <__vector_3+0x20>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <__vector_3+0x2a>
 1bc:	00 00       	nop
	_delay_ms(1000);
}
 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	2f 91       	pop	r18
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
