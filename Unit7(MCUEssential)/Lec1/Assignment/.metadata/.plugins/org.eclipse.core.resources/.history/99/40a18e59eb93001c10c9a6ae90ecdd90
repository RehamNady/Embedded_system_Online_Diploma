/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
#define GPIOA_BASE 0x40010800
#define GPIOB_BASE 0x40010C00
#define RCC_BASE 0x40021000

#define GPIOA_CRL *((volatile unsigned int*)(GPIOA_BASE+0x00))
#define GPIOA_CRH *((volatile unsigned int*)(GPIOA_BASE+0x04))
#define GPIOA_IDR *((volatile unsigned int*)(GPIOA_BASE+0x08))
#define GPIOA_ODR *((volatile unsigned int*)(GPIOA_BASE+0x0C))


#define GPIOB_CRL *((volatile unsigned int*)(GPIOB_BASE+0x00))
#define GPIOB_CRH *((volatile unsigned int*)(GPIOB_BASE+0x04))
#define GPIOB_IDR *((volatile unsigned int*)(GPIOB_BASE+0x08))
#define GPIOB_ODR *((volatile unsigned int*)(GPIOB_BASE+0x0C))


#define RCC_APB2ENR *((volatile unsigned int*)(RCC_BASE+0x18))
#define RCC_CFGR *((volatile unsigned int*)(RCC_BASE+0x04))


void clk_init()
{
	//Enable clock GPIOA
	RCC_APB2ENR |=1<<2;
	//Enable clock GPIOB
	RCC_APB2ENR |=1<<3;

}
void GPIO_init()
{
	GPIOA_CRL=00;
	GPIOB_CRL=00;
	//pA1 i/p highZ

	GPIOA_CRL |=1<<6;
	//pB1 o/p push pull mode 0MHZ
	GPIOB_CRL &=~(0b11<<6);
	GPIOB_CRL |=(0b01<<4);
	//PA13 i/p highZ
	GPIOB_CRH &=~(0b11<<20);
	GPIOB_CRH |=(0b01<<22);
	//pB13 o/p push pull mode
	GPIOB_CRH |=(0b01<<20);
	GPIOB_CRH &=~(0b11<<22);

}

void my_wait(int x)
{
	unsigned int i,j;
	for(i=0;i<x;i++)
		for(j=0;j<255;j++);
}
int main(void)
{
	clk_init;
	GPIO_init;

	while(1)
	{
		//portA1 >> connected by external PUR //single pressing
		if(((GPIOA_IDR &(1<<1)) >>1)==0)  //(!((GPIOA_IDR >>1)&1))
		{
			GPIOB_ODR ^=1<<1;
			while(((GPIOA_IDR &(1<<1)) >>1)==0);
		}
		//portA13 >> connected by external PDR // multipressing
		if(((GPIOA_IDR &(1<<1)) >>13)==1)
		{
			GPIOB_ODR ^=1<<13;

		}
		my_wait(1);


	}

}
