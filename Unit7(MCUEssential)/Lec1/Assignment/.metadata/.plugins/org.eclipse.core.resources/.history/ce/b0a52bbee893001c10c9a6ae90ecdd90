/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include "GPIO_HW.h"

void GPIO_init()
{
	//01: Floating input (reset state)
	GPIOA_CRL &=~(0b1111<<4); //portA1 input
	GPIOA_CRL |=(1<<6);
	GPIOA_CRH &=~(0b1111<<20); //portA13 input
	GPIOA_CRH |=(1<<22);

	//00: General purpose output push-pull PB1
	GPIOB_CRL &=~(0b111<<5);
	GPIOB_CRL |=(1<<4);

	//00: General purpose output push-pull PB13
	GPIOB_CRH &=~(0b111<<21);
	GPIOB_CRH |=(1<<20);
}

void CLK_init()
{
	//IO port A clock enable
	RCC_APB2ENR |=1<<2;

	//IO port B clock enable
	RCC_APB2ENR |=1<<3;

}

void wait_ms(int time)
{
	int i,j;
	for(i=0;i<time;i++)
		for(j=0;j<255;j++);
}
int main(void)
{
	GPIO_init();
	CLK_init();

	while(1)
	{
		if(((GPIOA_IDR >>1)&1)==0)
		{
			GPIOB_ODR ^=1<<1;  //toggle bit
			while(((GPIOA_IDR >>1)&1)==0); // single pressing
		}
		//multi pressing
		if(((GPIOA_IDR >>13)&1)==1)
		{
			GPIOB_ODR ^=1<<13;  //toggle bit
		}
		wait_ms(1);
	}
}
