
7Segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000644  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000057f  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c0  00000000  00000000  00000da7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001068  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000347  00000000  00000000  0000108c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000100  00000000  00000000  000013d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
	int i,j,x;
	// portc 2:7 output
	DDRC_Reg = 0xFC;
  6c:	8c ef       	ldi	r24, 0xFC	; 252
  6e:	84 bb       	out	0x14, r24	; 20

    while (1) 
    {
		for(i=0;i<10;i++)
  70:	e0 e0       	ldi	r30, 0x00	; 0
  72:	f0 e0       	ldi	r31, 0x00	; 0
  74:	41 c0       	rjmp	.+130    	; 0xf8 <main+0x8c>
		{
			for(j=0;j<10;j++)
			{
				for(x=0;x<100;x++)
				{
					PORTC_Reg = ((PORTC_Reg & 0x0F)|(i<<4));
  76:	85 b3       	in	r24, 0x15	; 21
  78:	28 2f       	mov	r18, r24
  7a:	2f 70       	andi	r18, 0x0F	; 15
  7c:	cf 01       	movw	r24, r30
  7e:	82 95       	swap	r24
  80:	92 95       	swap	r25
  82:	90 7f       	andi	r25, 0xF0	; 240
  84:	98 27       	eor	r25, r24
  86:	80 7f       	andi	r24, 0xF0	; 240
  88:	98 27       	eor	r25, r24
  8a:	82 2b       	or	r24, r18
  8c:	85 bb       	out	0x15, r24	; 21
					PORTC_Reg |=1<<3; //enable 2nd segment
  8e:	85 b3       	in	r24, 0x15	; 21
  90:	88 60       	ori	r24, 0x08	; 8
  92:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	8f ec       	ldi	r24, 0xCF	; 207
  96:	97 e0       	ldi	r25, 0x07	; 7
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <main+0x2c>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x32>
  9e:	00 00       	nop
					_delay_ms(1);
					PORTC_Reg &=~(1<<3); //disable 2nd segment
  a0:	85 b3       	in	r24, 0x15	; 21
  a2:	87 7f       	andi	r24, 0xF7	; 247
  a4:	85 bb       	out	0x15, r24	; 21
					
					PORTC_Reg = ((PORTC_Reg & 0x0F)|(j<<4));
  a6:	85 b3       	in	r24, 0x15	; 21
  a8:	28 2f       	mov	r18, r24
  aa:	2f 70       	andi	r18, 0x0F	; 15
  ac:	cb 01       	movw	r24, r22
  ae:	82 95       	swap	r24
  b0:	92 95       	swap	r25
  b2:	90 7f       	andi	r25, 0xF0	; 240
  b4:	98 27       	eor	r25, r24
  b6:	80 7f       	andi	r24, 0xF0	; 240
  b8:	98 27       	eor	r25, r24
  ba:	82 2b       	or	r24, r18
  bc:	85 bb       	out	0x15, r24	; 21
					PORTC_Reg |=1<<2; //enable 1st segment
  be:	85 b3       	in	r24, 0x15	; 21
  c0:	84 60       	ori	r24, 0x04	; 4
  c2:	85 bb       	out	0x15, r24	; 21
  c4:	8f e9       	ldi	r24, 0x9F	; 159
  c6:	9f e0       	ldi	r25, 0x0F	; 15
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x5c>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x62>
  ce:	00 00       	nop
					_delay_ms(2);
					PORTC_Reg &=~(1<<2); // disable 1st segment
  d0:	85 b3       	in	r24, 0x15	; 21
  d2:	8b 7f       	andi	r24, 0xFB	; 251
  d4:	85 bb       	out	0x15, r24	; 21
    {
		for(i=0;i<10;i++)
		{
			for(j=0;j<10;j++)
			{
				for(x=0;x<100;x++)
  d6:	4f 5f       	subi	r20, 0xFF	; 255
  d8:	5f 4f       	sbci	r21, 0xFF	; 255
  da:	02 c0       	rjmp	.+4      	; 0xe0 <main+0x74>
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	50 e0       	ldi	r21, 0x00	; 0
  e0:	44 36       	cpi	r20, 0x64	; 100
  e2:	51 05       	cpc	r21, r1
  e4:	44 f2       	brlt	.-112    	; 0x76 <main+0xa>

    while (1) 
    {
		for(i=0;i<10;i++)
		{
			for(j=0;j<10;j++)
  e6:	6f 5f       	subi	r22, 0xFF	; 255
  e8:	7f 4f       	sbci	r23, 0xFF	; 255
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <main+0x84>
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	6a 30       	cpi	r22, 0x0A	; 10
  f2:	71 05       	cpc	r23, r1
  f4:	9c f3       	brlt	.-26     	; 0xdc <main+0x70>
	// portc 2:7 output
	DDRC_Reg = 0xFC;

    while (1) 
    {
		for(i=0;i<10;i++)
  f6:	31 96       	adiw	r30, 0x01	; 1
  f8:	ea 30       	cpi	r30, 0x0A	; 10
  fa:	f1 05       	cpc	r31, r1
  fc:	bc f3       	brlt	.-18     	; 0xec <main+0x80>
  fe:	b8 cf       	rjmp	.-144    	; 0x70 <main+0x4>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
