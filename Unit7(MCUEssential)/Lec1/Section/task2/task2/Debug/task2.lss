
task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000108  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000573  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004fb  00000000  00000000  00000707  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001a7  00000000  00000000  00000c02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000dac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002fb  00000000  00000000  00000dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000036  00000000  00000000  000010cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001101  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

int main(void)
{
	unsigned char flag =0;
	// d5,6,7 output
	DDRD_Reg |=(0b111<<5);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 6e       	ori	r24, 0xE0	; 224
  70:	81 bb       	out	0x11, r24	; 17
	//d0 input
	DDRD_Reg &=~(1<<0);
  72:	81 b3       	in	r24, 0x11	; 17
  74:	8e 7f       	andi	r24, 0xFE	; 254
  76:	81 bb       	out	0x11, r24	; 17
#include <util/delay.h>


int main(void)
{
	unsigned char flag =0;
  78:	80 e0       	ldi	r24, 0x00	; 0
	//d0 input
	DDRD_Reg &=~(1<<0);
    
    while (1) 
    {
		if(GetBit(PIND_Reg,0)==1)
  7a:	80 9b       	sbis	0x10, 0	; 16
  7c:	16 c0       	rjmp	.+44     	; 0xaa <main+0x3e>
				ToggleBit(PORTD_Reg,7);
				flag=0;
				
			}
			*/
			switch (flag)
  7e:	81 30       	cpi	r24, 0x01	; 1
  80:	51 f0       	breq	.+20     	; 0x96 <main+0x2a>
  82:	18 f0       	brcs	.+6      	; 0x8a <main+0x1e>
  84:	82 30       	cpi	r24, 0x02	; 2
  86:	69 f0       	breq	.+26     	; 0xa2 <main+0x36>
  88:	10 c0       	rjmp	.+32     	; 0xaa <main+0x3e>
			{
				case 0:
				ToggleBit(PORTD_Reg,5);
  8a:	22 b3       	in	r18, 0x12	; 18
  8c:	90 e2       	ldi	r25, 0x20	; 32
  8e:	92 27       	eor	r25, r18
  90:	92 bb       	out	0x12, r25	; 18
				flag++;
  92:	8f 5f       	subi	r24, 0xFF	; 255
				break;
  94:	0a c0       	rjmp	.+20     	; 0xaa <main+0x3e>
				case 1:
				ToggleBit(PORTD_Reg,6);
  96:	22 b3       	in	r18, 0x12	; 18
  98:	90 e4       	ldi	r25, 0x40	; 64
  9a:	92 27       	eor	r25, r18
  9c:	92 bb       	out	0x12, r25	; 18
				flag++;
  9e:	8f 5f       	subi	r24, 0xFF	; 255
				break;
  a0:	04 c0       	rjmp	.+8      	; 0xaa <main+0x3e>
				case 2:
				ToggleBit(PORTD_Reg,7);
  a2:	82 b3       	in	r24, 0x12	; 18
  a4:	80 58       	subi	r24, 0x80	; 128
  a6:	82 bb       	out	0x12, r24	; 18
				flag=0;
  a8:	80 e0       	ldi	r24, 0x00	; 0
				break;
				
			}
			
		}
		while(GetBit(PIND_Reg,0)==1);
  aa:	80 99       	sbic	0x10, 0	; 16
  ac:	fe cf       	rjmp	.-4      	; 0xaa <main+0x3e>
  ae:	e5 cf       	rjmp	.-54     	; 0x7a <main+0xe>

000000b0 <_exit>:
  b0:	f8 94       	cli

000000b2 <__stop_program>:
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <__stop_program>
